<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>quick sort on Interview</title><link>https://example.com/tags/quick-sort/</link><description>Recent content in quick sort on Interview</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://example.com/tags/quick-sort/index.xml" rel="self" type="application/rss+xml"/><item><title>0215. Kth Largest Element in an Array</title><link>https://example.com/docs/algs/leetcode/215_kth_largest_element_in_an_arrary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.com/docs/algs/leetcode/215_kth_largest_element_in_an_arrary/</guid><description>Description # Given an integer array nums and an integer k, return the kth largest element in the array.
Note that it is the kth largest element in the sorted order, not the kth distinct element.
Solutions # Heap # 创建一个 k 个大小的最小堆，首先先将前 k 个元素压入堆中，而后面的元素只有当其比堆顶元素要大的时候才可以入堆。最后堆顶元素即为所求。
import ( &amp;#34;container/heap&amp;#34; ) func findKthLargest(nums []int, k int) int { return findKthLargestUsingSort(nums, 0, len(nums)-1, k) } // 解法1， 使用最大堆来解 func findKthLargestUsingHeap(nums []int, k int) int { var maxHeap MaxHeap heap.</description></item></channel></rss>