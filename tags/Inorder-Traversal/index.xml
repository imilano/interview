<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Inorder Traversal on Interview</title><link>https://example.com/tags/Inorder-Traversal/</link><description>Recent content in Inorder Traversal on Interview</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://example.com/tags/Inorder-Traversal/index.xml" rel="self" type="application/rss+xml"/><item><title>0101. Symmetric Tree</title><link>https://example.com/docs/algs/leetcode/101_symmetric_tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.com/docs/algs/leetcode/101_symmetric_tree/</guid><description>Description # Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).
Solutions # Recursive # 简单题，左子树的左节点的值要等于右子树的右子树的右节点的值，左子树的右节点的值要等于右子树的左节点的值。
func isSymmetric(root *TreeNode) bool { return helper(root, root) } func helper(root1, root2 *TreeNode) bool { if root1 == nil &amp;amp;&amp;amp; root2 == nil { return true } if root1 == nil || root2 == nil { return false } if root1.Val != root2.</description></item><item><title>0230. Kth Smallest Element in a BST</title><link>https://example.com/docs/algs/leetcode/230_kth_smallest_element_in_a_bst/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.com/docs/algs/leetcode/230_kth_smallest_element_in_a_bst/</guid><description>Description # Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.
Solutions # 这个题很简单，只需要使用中序遍历即可。一下分别给出递归和迭代的解法。
Recursive # type TreeNode struct { Val int Left *TreeNode Right *TreeNode } func kthSmallest(root *TreeNode, k int) int { if root == nil { return math.MinInt } return helper(root, &amp;amp;k) } func helper(root *TreeNode, cur *int) int { if root == nil { return math.</description></item></channel></rss>