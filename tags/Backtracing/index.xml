<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Backtracing on Interview</title><link>https://example.com/tags/Backtracing/</link><description>Recent content in Backtracing on Interview</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://example.com/tags/Backtracing/index.xml" rel="self" type="application/rss+xml"/><item><title>0046. Permutations</title><link>https://example.com/docs/algs/leetcode/46_permutations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.com/docs/algs/leetcode/46_permutations/</guid><description> Description # Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.
Solutions # Array(swap) # 基于交换进行 permutate 即可。
func permute(nums []int) [][]int { var res [][]int size := len(nums) helper(0, size, nums, &amp;amp;res) return res } func helper(start,size int, nums []int, res *[][]int) { if start &amp;gt;= size { tmp := make([]int, size) copy(tmp, nums) *res = append(*res, tmp) return } for i := start; i &amp;lt; size; i++ { nums[i], nums[start] = nums[start], nums[i] // 注意这里是 start + 1， 而不是 i helper(start+1, size, nums, res) nums[i], nums[start] = nums[start], nums[i] } }</description></item></channel></rss>