<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Level Order Traversal on Interview</title><link>https://example.com/tags/Level-Order-Traversal/</link><description>Recent content in Level Order Traversal on Interview</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://example.com/tags/Level-Order-Traversal/index.xml" rel="self" type="application/rss+xml"/><item><title>0559. Maximum Depth of N-ary Tree</title><link>https://example.com/docs/algs/leetcode/559_maximum_dpeth_of_n-ary_tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.com/docs/algs/leetcode/559_maximum_dpeth_of_n-ary_tree/</guid><description>Description # Given a n-ary tree, find its maximum depth.
The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.
Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).
Solutions # Iterative # 简单的中序遍历即可。
type Node struct { Val int Children []*Node } func maxDepth(root *Node) int { if root == nil { return 0 } var queue []*Node = []*Node{root} var depth int for len(queue) !</description></item></channel></rss>