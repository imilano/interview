[{"id":0,"href":"/docs/algs/","title":"Algorithms","section":"Docs","content":"This is where I document some problems that I solved.\n"},{"id":1,"href":"/docs/algs/codingInterviews/","title":"Coding Interviews","section":"Algorithms","content":"这里是一些《剑指 Offer》的刷题题解。\n数据结构 #  链表 #   反转链表\nTODO recheck 注意这里递归方法的反转思路。\n  两个链表的第一个公共节点\n  TODO recheck\n注意条件  链表中环的入口节点  TODO recheck\n首先需要注意如何进行环检测，如何判断环终止。其次需要注意的是，如何找到环中的入口节点。\n 复杂链表的复制\n链表的复制和图的复制都可以考虑 map。\n  删除链表中的重复节点\n这里一个非常需要注意的点就是，如果头结点也要被删除的话怎么办？如果头结点的也要被删除的话，那么判断条件就会变得比较复杂，这里的一个解决办法就是，增加一个虚拟的头结点，然后让这个虚拟的头结点指向真正的头结点，遍历的时候就从这个虚拟的头结点开始遍历，这样就能够应付真实头结点也要被删除的情况。 TODO rechck 增加虚拟头结点的技巧\n  从尾到头打印链表 简单题\n  合并两个排序的链表 简单题\n  链表中倒数最后 k 个节点 简单题\n  删除链表汇中重复的节点 TODO recheck\n  删除链表的节点 简单，注意虚拟头结点的使用\n  树 #   二叉树的深度 简单题\n  按之字形顺序打印二叉树 简单题\n  二叉搜索树的第 k 个节点 简单题\n  重建二叉树 TODO recheck\n  树的子结构 简单题\n  二叉树的镜像 简单题\n  从上往下打印二叉树 简单题\n  二叉搜索树的后序遍历序列 注意 corner case\n  二叉树和为某一值的路径 TODO 注意叶子节点的判断方式\n  二叉树中和为某一值的路径 II TODO 注意叶子节点的判断方式\n  二叉搜索树与双向链表 TODO recheck 这个题需要注意，尤其是怎么确定 head 节点，以及 pre 节点的选择，还有就是怎么将 pre 节点和当前节点做连接。题目本身其实并不算难，就是中序遍历，但是问题就是一些边界条件的考量，在这里尤其需要注意。\n  判断是不是平衡二叉树 TODO recheck 这里虽然是个简单题，但是还是要注意一些，要快速做出来。\n  二叉树的下一个节点 TODO recheck 这里需要好好注意一下问题是怎么分析的。\n  对称的二叉树 简单题\n  把二叉树打印成多行 简单题，其实就是一个二叉树的层次遍历。\n  序列化二叉树 TODO recheck 这个题需要重做\n  二叉树中和为某一值的路径 TODO recheck 这个题也很需要注意。首先需要注意如何将每个节点都视为根节点的操作方式，其次要注意结果的判断方式。\n  二叉树中两个节点的最近公共祖先 TODO recheck\n这题需要再做一次。\n  二叉搜索树的最近公共祖先 简单题。\n  队列 \u0026amp; 栈 #   双栈实现队列 简单题\n  包含 Min 函数的栈 TODO recheck 这个题涉及到单调栈，需要多多注意。\n  栈的压入弹出序列。 简单题，只需要使用一个栈进行模拟即可。\n  翻转单词序列 思路比较巧妙。\n  滑动窗口的最大值 单调队列 TODO\n  算法 #  搜索算法 #     题目 难度 技巧 特别关注     53. 数字在升序数组中出现的次数 简单 二分查找、中心扩散 No   4. 二维数组中的查找 简单 剪枝 YES   11. 旋转数组中的最小数字 简单 二分 YES   38. 字符串的排列 中等 回溯 YES          "},{"id":2,"href":"/docs/algs/leetcode/","title":"Leetcode","section":"Algorithms","content":"这里是一些 LeetCode 的刷题题解。\nData structure #  String #     Problem Difficulty Method Redo     28. Implement strStr easy None No    Search #  Bianry Search #     Problem Difficulty Method Redo     33. Search in Rotated Sorted Array middle binary search YES   34. Find First and Last Position of Element in Sorted Array middle binary search No    | :\u0026mdash;\u0026ndash;: | :\u0026mdash;-: | :\u0026mdash;-: | :\u0026mdash;-: | | 21. Merge Two Sorted List | middle | Merge Sort | No | | 22. Generate Parentheses | middle | Prune, Recursive | YES | | 26. Remove Duplicates from Sorted Array | easy | | No |\nMath #  Bit Manipulation #     Problem Difficulty Method Redo     29. Divide Two Integers middle Bit manipulation YES    "},{"id":3,"href":"/docs/algs/codingInterviews/11_%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/","title":"11. 旋转数组的最小数字","section":"Coding Interviews","content":"Descriptioin #   有一个长度为 n 的非降序数组，比如[1,2,3,4,5]，将它进行旋转，即把一个数组最开始的若干个元素搬到数组的末尾，变成一个旋转数组，比如变成了[3,4,5,1,2]，或者[4,5,1,2,3]这样的。请问，给定这样一个旋转数组，求数组中的最小值。\n数据范围：$1 \\le n \\le 10000$，数组中任意元素的值: $0 \\le val \\le 10000$。 要求：空间复杂度：$\\Omicron(1)$ ，时间复杂度：$\\Omicron(\\log n)$\n Solutions #  Binary Search #  二分查找，使用两个指针 left 和 right 分别指向数组的待查找序列的左侧和右侧，则：\n 如果中间元素比右侧元素小，那么向左查找，即 right = mid 如果中间元素比右侧元素大，那么向右查找， 即 left = mid + 1 如果中间元素等于右侧元素，那么最小元素即可能在左边，也可能在右边，则可以搜索右边界 最后返回 left 指向的元素即可。  func minNumberInRotateArray( nums []int ) int {  // write code here  var res int  size := len(nums)  if size == 0 {  return res  }   left, right := 0, size -1  for left \u0026lt; right {  mid := (left+right)/2  if nums[mid] \u0026gt; nums[right] {  left = mid + 1  } else if nums[mid] \u0026lt; nums[right] {  right = mid  } else if nums[mid] == nums[right] {  right = right -1  }  }   return nums[left] } "},{"id":4,"href":"/docs/algs/leetcode/21_merge_two_sorted_list/","title":"21. Merge Two Sorted List","section":"Leetcode","content":"Description #   You are given the heads of two sorted linked lists list1 and list2.\nMerge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.\nReturn the head of the merged linked list.\n Solutions #  Merge Sort #  func mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode { \tres := new(ListNode) \tnode := res \tdummyHead1, dummyHead2 := list1, list2 \tfor dummyHead1 != nil \u0026amp;\u0026amp; dummyHead2 != nil { \tt := new(ListNode) \tif dummyHead1.Val \u0026lt;= dummyHead2.Val { \tt.Val = dummyHead1.Val \tdummyHead1 = dummyHead1.Next  \t} else { \tt.Val = dummyHead2.Val \tdummyHead2 = dummyHead2.Next \t} \tnode.Next = t \tnode = node.Next \t}  \tfor dummyHead1 != nil { \tt := new(ListNode) \tt.Val = dummyHead1.Val \tnode.Next = t \tnode = node.Next \tdummyHead1 = dummyHead1.Next \t}  \tfor dummyHead2 != nil { \tt := new(ListNode) \tt.Val = dummyHead2.Val \tnode.Next = t \tnode = node.Next \tdummyHead2 = dummyHead2.Next \t}  \treturn res.Next } "},{"id":5,"href":"/docs/algs/leetcode/22_generate_parentheses/","title":"22. Generate Parentheses","section":"Leetcode","content":"Description #   Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n Solutions #  Recursive #  参见： https://leetcode-cn.com/problems/generate-parentheses/solution/hui-su-suan-fa-by-liweiwei1419/\n使用两个变量 left 和 right 来表示「左括号使用了集合」和「右括号使用了几个」，通过分析可以得到以下结论： - 只有当left 和 right 都比 n 小的时候，才产生分支。 - 产生左分支的时候，只看当前还有左括号可用 - 产生右分支的时候，还受到左括号数量的限制，left 要大于 right 的时候，才可以产生分支。否则就是无效分支，可以直接返回。 - 在左边和右边的括号数都等于 n 的时候结算。\nfunc generateParenthesis(n int) []string {  var res []string \tif n == 0 { \treturn res \t}  \tgenerateParenthesisHelper(n, 0,0,\u0026#34;\u0026#34;, \u0026amp;res) \treturn res }  func generateParenthesisHelper(n, left, right int, cur string, res *[]string) { \tif left == n \u0026amp;\u0026amp; right == n { \t*res = append(*res, cur) \treturn \t}  \t// 剪枝 \tif left \u0026lt; right { \treturn \t}  \tif left \u0026lt; n { \tgenerateParenthesisHelper(n, left+1, right, cur + \u0026#34;(\u0026#34;, res) \t} \tif right \u0026lt; n { \tgenerateParenthesisHelper(n, left, right+1, cur + \u0026#34;)\u0026#34;, res) \t} } "},{"id":6,"href":"/docs/algs/leetcode/23_merge_k_sorted_list/","title":"23. Merge K Sorted List","section":"Leetcode","content":"Description #   You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\nMerge all the linked-lists into one sorted linked-list and return it.\n Solutions #  Min Heap #  很简单的想法，使用最小堆即可。\n/** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func mergeKLists(lists []*ListNode) *ListNode { \treturn mergeKListsSolution1(lists) }  // 使用最小堆，将所有的节点数据都插入到最小堆中，然后再把所有元素从最小堆中弹出 func mergeKListsSolution1(lists []*ListNode) *ListNode { \tvar minHeap MinHeapArr \theap.Init(\u0026amp;minHeap)  \tfor _, list := range lists { \tt := list \tfor t != nil { \theap.Push(\u0026amp;minHeap, t.Val) \tt = t.Next \t}  \t}  \tres := new(ListNode) \tnode := res \tfor len(minHeap) \u0026gt; 0 { \tval := heap.Pop(\u0026amp;minHeap).(int) \tt := new(ListNode) \tt.Val = val \tnode.Next = t \tnode = node.Next \t}  \treturn res.Next }   type MinHeapArr []int  func (h MinHeapArr) Len() int { \treturn len(h) }  func (h MinHeapArr) Less(i, j int) bool { \treturn h[i] \u0026lt; h[j] }  func (h MinHeapArr) Swap(i, j int) { \th[i], h[j] = h[j], h[i] }  func (h *MinHeapArr) Push(x interface{}) { \t*h = append(*h, x.(int)) }  func (h *MinHeapArr) Pop() interface{} { \tsize := len(*h) \tres := (*h)[size-1] \t*h = (*h)[:size-1] \treturn res }  func (h *MinHeapArr) Top() interface{} { \t// TODO \treturn nil } "},{"id":7,"href":"/docs/algs/leetcode/26_remove_duplicates_from_sorted_array/","title":"26. remove duplicated from sorted array","section":"Leetcode","content":"Description #   Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\nReturn k after placing the final result in the first k slots of nums.\nDo not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\n Solution #  简单题。使用一个 pos 指针指向当前不重复元素应该存储的位置，然后遍历数组，对于重复元素则跳过，知道遇到不重复元素位置，将该元素放到 pos 处，然后让 pos 和 start 都自增，然后继续遍历\nfunc removeDuplicates(nums []int) int {  size := len(nums)  if size \u0026lt;= 1 {  return size  }   start, pos := 1, 1  for start \u0026lt; size {  for start \u0026lt; size \u0026amp;\u0026amp; nums[start] == nums[start-1] {  start++  }  if start \u0026lt; size {  nums[pos] = nums[start]  pos++  }   start++  }   return pos  } "},{"id":8,"href":"/docs/algs/leetcode/28_implement_strStr/","title":"28. Implement strStr","section":"Leetcode","content":"Description #   Implement strStr().\nGiven two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n Solutions #  太简单了在，直接看代码即可。\nfunc strStr(haystack string, needle string) int {  var pos int  size := len(haystack)  targetSize := len(needle)  if size == 0 || targetSize == 0 {  return pos  }   var start int   pos = -1  for start \u0026lt; size {  if haystack[start] != needle[0] {  start++  continue  }   if start + targetSize \u0026lt;= size \u0026amp;\u0026amp; haystack[start: start+targetSize] == needle {  pos = start  break  }  start++  }   return pos } "},{"id":9,"href":"/docs/algs/codingInterviews/28_%E5%AF%B9%E7%A7%B0%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91/","title":"28. 对称的二叉树","section":"Coding Interviews","content":"Description #   给定一棵二叉树，判断其是否是自身的镜像（即：是否对称）\n Solutions #  Recursive #  func isSymmetrical( pRoot *TreeNode ) bool {  // write code here  if pRoot == nil {  return true  }   return isSameTree(pRoot.Left, pRoot.Right) }  func isSameTree(root1, root2 *TreeNode) bool {  if root1 == nil \u0026amp;\u0026amp; root2 == nil {  return true  }   if root1 == nil || root2 == nil {  return false  }   if root1.Val != root2.Val {  return false  }   return isSameTree(root1.Left, root2.Right) \u0026amp;\u0026amp; isSameTree(root1.Right, root2.Left) } "},{"id":10,"href":"/docs/algs/leetcode/29_divide_two_integers/","title":"29. Divide Two Integers","section":"Leetcode","content":"Description #   Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.\nThe integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.\nReturn the quotient after dividing dividend by divisor.\nNote: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.\n Solutions #  Subtraction #  俗话说得好，\u0026ldquo;计算中的除法都是通过减法来完成的\u0026rdquo;。 :)\n很不幸，下面这个解法超时了. :)\nfunc divide(dividend int, divisor int) int {  var quotient int  if dividend == 0 {  return quotient  }  negative := true  if dividend \u0026gt; 0 \u0026amp;\u0026amp; divisor \u0026gt; 0 || dividend \u0026lt; 0 \u0026amp;\u0026amp; divisor \u0026lt; 0 {  negative = false  }     dividend, divisor = abs(dividend), abs(divisor)  for dividend \u0026gt; 0 {  dividend -= divisor  if dividend \u0026gt;= 0 {  quotient++  }   if negative \u0026amp;\u0026amp; dividend \u0026gt; 0 \u0026amp;\u0026amp; quotient \u0026gt;= int(math.MaxInt32) + 1 {  return int(math.MinInt32)  }   if !negative \u0026amp;\u0026amp; dividend \u0026gt; 0 \u0026amp;\u0026amp; quotient \u0026gt;= int(math.MaxInt32) {  return int(math.MaxInt32)  }  }   if negative {  return -quotient  }   return quotient }  func abs(a int) int {  if a \u0026lt; 0 {  return -a  }   return a } "},{"id":11,"href":"/docs/algs/codingInterviews/30_%E5%8C%85%E5%90%AB-min-%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/","title":"30. 包含 min 函数的栈","section":"Coding Interviews","content":"Description #   定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的 min 函数，输入操作时保证 pop、top 和 min 函数操作时，栈中一定有元素。\n此栈包含的方法有： push(value):将value压入栈中 pop():弹出栈顶元素 top():获取栈顶元素 min():获取栈中最小元素\n数据范围：操作数量满足 $0 \\le n \\le 300$ ，输入的元素满足 $|val| \\le 10000$ 进阶：栈的各个操作的时间复杂度是 $\\Omicron(1)$ ，空间复杂度是 $\\Omicron(n)$。\n Solutions #  Stack #  使用两个栈，一个栈stack1用于正常压入和弹出，另一个栈stack2用于实现单调栈。当压入一个元素时，如果当前元素比 stack2 的栈顶元素还要大，则将当前元素压入 stack1 的同时，还将当前元素压入 stack2，如果当前元素不比 stack2 的栈顶元素要大，则将 stack2 的栈顶元素重复入栈。当弹出元素时，将 stack1 和 stack2 的栈顶元素同步弹出。当获取最小值时，只需要取出 stack2 的栈顶元素即可。\n// 用于实现正常的 push 与 pop 操作 var stack1 []int // 用于存储最小值 var stack2 []int  func Push(node int) {  // write code here  stack1 = append(stack1, node)  size := len(stack2)  if size == 0 || stack2[size-1] \u0026gt; node {  stack2 = append(stack2, node)  } else {  stack2 = append(stack2, stack2[size-1])  }  } func Pop() {  // write code here  size := len(stack1)  stack1 = stack1[:size-1]  stack2 = stack2[:size-1] } func Top() int {  // write code here  size := len(stack1)  return stack1[size-1] } func Min() int {  // write code here  size := len(stack2)  return stack2[size-1] } "},{"id":12,"href":"/docs/algs/codingInterviews/31_%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/","title":"31. 栈的压入弹出序列","section":"Coding Interviews","content":"Description #   输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。\n Solutions #  栈模拟 #  新建一个栈来模拟出栈序列。使用一个指针 inPos 指向当前入栈序列的单签入栈元素，使用另一个指针 outPos 指向出栈序列当前应该出栈的元素，然后开始模拟出入栈。\n 首先，如果当前栈顶元素和出栈序列匹配，则出栈栈顶元素，并且将 outPos 右移，直到二者不匹配或者栈为空 将 inPos 指针指向的入栈序列的元素入栈，然后将 inPos 右移。 不断循环上述过程，直到入栈序列中的所有元素都入栈。 最后判断是否出栈序列中的所有元素都已经匹配完成即可。  func IsPopOrder( pushV []int , popV []int ) bool {  // write code here  size := len(pushV)  if size == 0 {  return true  }  var stack []int  stack = append(stack, pushV[0])  inPos, outPos := 1, 0 \t// 为什么这里的循环用的是 \u0026lt;= ，而不是 \u0026lt; ？ \t// 因为有可能我们一直从入栈序列中入栈的操作，直到所有元素都已经入栈。如果只使用 \u0026lt; 符号的话， \t// 我们就无法判断出栈序列是否和栈顶元素匹配（当然你也可以在 for 循环之后再加上这一步，只不过加 \t// 上这个=号之后可以少写一点代码）.  for inPos \u0026lt;= size {  // 如果栈顶元素和出栈序列当前元素匹配，则可以一直出栈  s := len(stack)  for s \u0026gt; 0 \u0026amp;\u0026amp; popV[outPos] == stack[s-1] {  stack = stack[:s-1]  s--  outPos++  }  \t// 为什么这里要有个 break ? \t// 很明显，当入栈序列已经全部入栈了时，我们需要跳出这个循环  if inPos == size {  break  }   // 当前栈中没有元素和出栈序列匹配，或者栈已经为空，则将入栈序列入栈  stack = append(stack, pushV[inPos])  inPos++  }   // 入栈序列遍历完之后，如果此时栈中的元素个数为0，则说明是有效序列；  // 否则如果栈中还有元素，则说明是无效序列。  return len(stack) == 0 \u0026amp;\u0026amp; outPos == size } "},{"id":13,"href":"/docs/algs/leetcode/33_search_in_rotated_array/","title":"33. Search in Rotated Sorted Array","section":"Leetcode","content":"Description #   There is an integer array nums sorted in ascending order (with distinct values).\nPrior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 \u0026lt;= k \u0026lt; nums.length) such that the resulting array is [nums[k], nums[k+1], \u0026hellip;, nums[n-1], nums[0], nums[1], \u0026hellip;, nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\nGiven the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\nYou must write an algorithm with O(log n) runtime complexity.\n Solutions #  Binary Search #  引用别人的话：\n 将数组一分为二，其中一定有一个是有序的，另一个可能是有序，也能是部分有序。 此时有序部分用二分法查找。无序部分再一分为二，其中一个一定有序，另一个可能有序，可能无序。就这样循环.\n 还是使用二分查找的方法来。首先，如果这个数组翻转了，那么至少有有一侧是占多数数字的，具体那哪一侧还要进一步判断。经过举例观察可以看到，如果中间数小于右边的数，那么右边一定是有序的；如果中间数大于右边的数，那么左半段是有序的。那么我们只需要在有序的区间内进行二分查找即可。详见代码。\nfunc search(nums []int, target int) int { \tsize := len(nums) \tleft, right := 0, size-1 \tfor left \u0026lt;= right { \tmid := left + (right-left)/2 \tif nums[mid] == target { \treturn mid \t} \t\tif nums[mid] \u0026lt; nums[right] { \t// 如果右半边有序，则对右半边进行二分 \tif nums[mid] \u0026lt; target \u0026amp;\u0026amp; nums[right] \u0026gt;= target { \tleft = mid + 1 \t} else { \tright = mid - 1 \t} \t} else { \t// 如果左半边有序，则对左半边进行二分 \tif nums[left] \u0026lt;= target \u0026amp;\u0026amp; nums[mid] \u0026gt; target { \tright = mid -1 \t} else { \tleft = mid + 1 \t} \t} \t}  \treturn -1 } "},{"id":14,"href":"/docs/algs/leetcode/34_find_first_and_last_position_of_element_in_sorted_array/","title":"34. Find First and Last Position of Element in Sorted Array","section":"Leetcode","content":"Description #   Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\nIf target is not found in the array, return [-1, -1].\nYou must write an algorithm with O(log n) runtime complexity.\n Solutions #  Binary Search #  二分查找再加上中间扩散，很容易想出来。\nfunc searchRange(nums []int, target int) []int {  res := []int{-1, -1}  size := len(nums)  if size == 0 {  return res  }   left, right := 0, size -1  for left \u0026lt;= right {  mid := (left+right)/2  if nums[mid] == target {  l,r := mid, mid  res[0] = l  res[1] = r  for l \u0026gt;= 0 \u0026amp;\u0026amp; nums[l] == target {  res[0] = l  l--  }   for r \u0026lt; size \u0026amp;\u0026amp; nums[r] == target {  res[1] = r  r++  }   break  } else if nums[mid] \u0026gt; target {  right = mid -1  } else if nums[mid] \u0026lt; target {  left = mid + 1  }  }   return res } "},{"id":15,"href":"/docs/algs/codingInterviews/37_%E5%BA%8F%E5%88%97%E5%8C%96%E4%BA%8C%E5%8F%89%E6%A0%91/","title":"37. 序列化二叉树","section":"Coding Interviews","content":"Description #   请实现两个函数，分别用来序列化和反序列化二叉树，不对序列化之后的字符串进行约束，但要求能够根据序列化之后的字符串重新构造出一棵与原二叉树相同的树。\n二叉树的序列化(Serialize)是指：把一棵二叉树按照某种遍历方式的结果以某种格式保存为字符串，从而使得内存中建立起来的二叉树可以持久保存。序列化可以基于先序、中序、后序、层序的二叉树等遍历方式来进行修改，序列化的结果是一个字符串，序列化时通过 某种符号表示空节点（#）\n二叉树的反序列化(Deserialize)是指：根据某种遍历顺序得到的序列化字符串结果str，重构二叉树。\n Solutions #  PreOrder Traversal #  采用先序遍历的方式进行序列化，同样采用先序遍历的方式进行反序列化。\nvar emptyNode string = \u0026#34;#\u0026#34; var seperator string = \u0026#34; \u0026#34; func Serialize( root *TreeNode ) string {  // write code here  if root == nil {  return \u0026#34;\u0026#34;  }   var res []string  _serialize(root, \u0026amp;res)  return strings.Join(res, seperator) }  func _serialize(root *TreeNode, res *[]string) {  if root != nil {  v := strconv.Itoa(root.Val)  *res = append(*res, v)   _serialize(root.Left, res)  _serialize(root.Right, res)  } else { \t// 递归是收敛的  *res = append(*res, emptyNode)  } }  func Deserialize( s string ) *TreeNode {  // write code here  if len(s) == 0 {  return nil  }   values := strings.Split(s, seperator)  return _deserialize(\u0026amp;values) }  func _deserialize(values *[]string) *TreeNode { \t// 注意这里，为什么这里不会出现数组越界访问呢，也就是说，你是如何保证数组里一定会有元素的呢？ \t// 其实在序列化的时候，对于每一条路径，我们最后会走到的节点不是叶子节点，而是该叶子节点的两个空子节点。 \t// 那么也就是说，序列化后的字符的最后一个字符一定是 \u0026#34;#\u0026#34; 符号，代表走到空节点，那么一定也会在下面的第一个 if 后即递归终止，那么肯定就不会出现数组越界访问的情况。  s := (*values)[0]  *values = (*values)[1:]  \t// 递归是收敛的  if s == emptyNode {  return nil  }   v, _ := strconv.Atoi(s)  root := new(TreeNode)  root.Val = v  root.Left = _deserialize(values)  root.Right = _deserialize(values)  return root } Level Order Traversal #  基于层次遍历的思想，但是需要将序列化的顺序和反序列化的顺序一一对应起来。序列化时，如果该节点非空，则将节点值序列化，然后将其左右子节点入队，如果节点为空，则用特定的字符来代替。反序列化时，也是使用层次遍历的方式，先是使用一个节点作为根节点，然后将其入队，然后不断从队列中取出节点来更新其子节点。从字符串中取值的时候，如果当前取到的值代表是一个空节点，则可以直接跳过。\n注意领会，这里序列化和反序列的顺序其实是一一对应的。\nfunc Serialize( root *TreeNode ) string {  // write code here  if root == nil {  return \u0026#34;\u0026#34;  }   var res []string  emptyNode := \u0026#34;#\u0026#34;  seperator := \u0026#34; \u0026#34;    var queue []*TreeNode  queue = append(queue, root)  for len(queue) != 0 {  size := len(queue)  for i := 0; i \u0026lt; size; i++ {  node := queue[i]  if node != nil {  s := strconv.Itoa(node.Val)  res = append(res, s)  queue = append(queue, node.Left)  queue = append(queue, node.Right)  } else {  res = append(res, emptyNode)  }  }   queue = queue[size:]  }   return strings.Join(res, seperator) }  func Deserialize( s string ) *TreeNode {  // write code here  if len(s) == 0 {  return nil  }  seperator := \u0026#34; \u0026#34;  emptyNode := \u0026#34;#\u0026#34;  nodes := strings.Split(s, seperator)   root := new(TreeNode)  root.Val,_ = strconv.Atoi(nodes[0])  nodes = nodes[1:]   var queue []*TreeNode  queue = append(queue, root)  for len(queue) != 0 {  size := len(queue)  for i := 0; i \u0026lt; size; i++ {  node := queue[i]  val := nodes[0]  nodes = nodes[1:]  if val != emptyNode {  v,_ := strconv.Atoi(val)  tmp := new(TreeNode)  tmp.Val = v  node.Left = tmp  queue = append(queue, tmp)  }   val = nodes[0]  nodes = nodes[1:]  if val != emptyNode {  v,_ := strconv.Atoi(val)  tmp := new(TreeNode)  tmp.Val = v  node.Right = tmp  queue = append(queue, tmp)  }  }   queue = queue[size:]  }   return root } "},{"id":16,"href":"/docs/algs/codingInterviews/38_%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/","title":"38. 字符串的排列","section":"Coding Interviews","content":"Description #   输入一个长度为 n 字符串，打印出该字符串中字符的所有排列，你可以以任意顺序返回这个字符串数组。\n例如输入字符串ABC,则输出由字符A,B,C所能排列出来的所有字符串ABC,ACB,BAC,BCA,CBA和CAB。\n Solutions #  使用全排列的思想来做。\nfunc Permutation( str string ) []string {  // write code here  var res []string  size := len(str)  if size == 0 {  return res  }   dict := make(map[string]bool)  permutate([]rune(str), 0, size, \u0026amp;dict)  for key, _ := range dict {  res = append(res, key)  }   return res }  func permutate(str []rune, start int, size int, dict *map[string]bool) {  if start == size {  s := string(str)  if _, ok := (*dict)[s]; !ok {  (*dict)[s] = true  }   return  }   for i := start; i \u0026lt; size; i++ {  str[start], str[i] = str[i], str[start] \t// 注意这里是 start + 1 而不是 i+1  permutate(str, start+1, size, dict) \t// 交换之后要还原  str[start], str[i] = str[i], str[start]  } } "},{"id":17,"href":"/docs/algs/codingInterviews/4_%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/","title":"4. 二维数组中的查找","section":"Coding Interviews","content":"Description #   在一个二维数组array中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n数据范围：矩阵的长宽满足 $0 \\le n$,$m \\le 500$ ， 矩阵中的值满足 $0 \\le val \\le 10^9$。\n进阶：空间复杂度 O(1)O(1) ，时间复杂度 O(n+m)O(n+m)\n Solutions #  从左下角开始进行遍历，因为数组维持了从左到右递增，从上到下递增的性质，那么如果当前元素比 target 要大， target 一定位于当前元素的右边；如果当前元素比 target 要小，那么 target 一定位于当前元素的上侧。\nfunc Find( target int , array [][]int ) bool {  // write code here  var res bool  m, n := len(array), len(array[0])  x, y := m-1, 0  for {  if x \u0026lt; 0 || y \u0026gt;= n {  break  }   if array[x][y] == target {  res = true  break  }   if target \u0026gt; array[x][y] {  y++  }  \t// 这里要加上一个 y \u0026lt; n, 因为上一个 if 对 y 进行了自增，导致这里的 y 不一定合法  if y \u0026lt; n \u0026amp;\u0026amp; target \u0026lt; array[x][y] {  x--  }  }   return res } "},{"id":18,"href":"/docs/algs/codingInterviews/53_%E6%95%B0%E5%AD%97%E5%9C%A8%E5%8D%87%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/","title":"53. 数字在升序数组中出现的次数","section":"Coding Interviews","content":"Description #   给定一个长度为 n 的非降序数组和一个非负数整数 k ，要求统计 k 在数组中出现的次数\n数据范围：$0 \\le n \\le 1000 $, $0 \\le k \\le 100$ ，数组中每个元素的值满足 $0 \\le val \\le 100$. 要求：空间复杂度 $\\Omicron(1)$，时间复杂度 $\\Omicron(\\log n)$\n Solutions #  Binary Search #  func GetNumberOfK( data []int , k int ) int {  // write code here  var res int  size := len(data)  if size \u0026lt; 1 {  return res  }   left, right := 0, size - 1  for left \u0026lt;= right {  mid := (left +right)/2  if data[mid] \u0026gt; k {  right = mid - 1  } else if data[mid] \u0026lt; k {  left = mid + 1  } else if data[mid] == k {  l,r := mid, mid  for l \u0026gt;= 0 \u0026amp;\u0026amp; data[l] == k {  l--  }   for r \u0026lt; size \u0026amp;\u0026amp; data[r] == k {  r++  }   res = r - l - 1  break  }  }   return res } "},{"id":19,"href":"/docs/algs/codingInterviews/59_%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/","title":"59. 滑动窗口的最大值","section":"Coding Interviews","content":"Description #   给定一个长度为 n 的数组 nums 和滑动窗口的大小 size ，找出所有滑动窗口里数值的最大值。\n例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}； 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个： {[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。\n Solutions #  Dequeue #  使用一个单调递减的单调队列来做。维持一个最大长度为 size 的单调队列，每当遍历到当前元素 i，如果当前元素 nums[i] 比队列尾部元素要大，则不断将队列尾部元素出队，直到队列为空或者当前元素 nums[i] 比队尾元素要小，然后将当前元素入队。这样的话，队列中要么维持着一个最大值，要么顶多维持着 size 个相对递减的连续值。然后检查队首元素是否过期，如果过期，则将队首元素出队，因为我们每次顶多入队一个，所以每次遍历也顶多只会有一个元素过期。最后检查当前窗口长度是否达到 size，如果达到了，则将队列首部元素入队即可。\n// 可以使用单调递减的单调队列来实现 func maxInWindows( num []int , size int ) []int {  // write code here  var res []int  n := len(num)  if size \u0026lt; 1 || n \u0026lt; 1 {  return res  }   var queue []int  for i := 0; i \u0026lt; n; i++ {  // 如果当前遍历到的元素比队尾元素要大，则不断将队尾元素出队  curLen := len(queue)  for curLen \u0026gt; 0 \u0026amp;\u0026amp; num[i] \u0026gt; num[queue[curLen-1]] {  curLen--  queue = queue[:curLen]  }   queue = append(queue, i) \t// 如果当前队首元素滑出左边界，则将其删除  if queue[0] + size \u0026lt;= i {  queue = queue[1:]  }  \t// 如果当前已经构成了一个有效的滑动窗口，则将当前最大值存入结果  if size \u0026lt;= i+1 {  res = append(res, num[queue[0]])  }  }   return res } "},{"id":20,"href":"/docs/algs/codingInterviews/68_%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/","title":"68. 二叉搜索树的最近公共祖先","section":"Coding Interviews","content":"Description #   给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。\n Solutions #  Recursive #  如果当前节点的值比要查找的值的最小值还要小，说明应该往当前节点的右节点进行查找；如果当前节点的值比要查找的值的最大值还要大，说明应该往当前节点的左子树进行查找。否则说明当前节点处于要查找的值之间，那么当前节点就是我们要查找的最近公共祖先。\nfunc lowestCommonAncestor( root *TreeNode , p int , q int ) int {  // write code here  if root == nil {  return -1  }   // 保持 p 比 q 要小  if p \u0026gt; q {  p,q = q, p  }   res := lcaHelper(root, p, q)  return res.Val }  func lcaHelper(root *TreeNode, mn,mx int) *TreeNode {  if root.Val \u0026gt; mx {  return lcaHelper(root.Left, mn, mx)  } else if root.Val \u0026lt; mn {  return lcaHelper(root.Right, mn, mx)  } else {  return root  } } "},{"id":21,"href":"/docs/algs/codingInterviews/73_%E7%BF%BB%E8%BD%AC%E5%8D%95%E8%AF%8D%E5%BA%8F%E5%88%97/","title":"73. 翻转单词序列","section":"Coding Interviews","content":"Description #   牛客最近来了一个新员工Fish，每天早晨总是会拿着一本英文杂志，写些句子在本子上。同事Cat对Fish写的内容颇感兴趣，有一天他向Fish借来翻看，但却读不懂它的意思。例如，“nowcoder. a am I”。后来才意识到，这家伙原来把句子单词的顺序翻转了，正确的句子应该是“I am a nowcoder.”。Cat对一一的翻转这些单词顺序可不在行，你能帮助他么？\n Solutions #  先翻转整个句子，然后再针对每个空格分割的单词单独翻转。\nfunc ReverseSentence( str string ) string {  // write code here  size := len(str)  if size \u0026lt;= 1 {  return str  }   runes := []rune(str)  size = len(runes)  // 先翻转整个字符串  for left,right := 0, size-1; left \u0026lt; right; left,right = left+1, right-1 {  runes[left],runes[right] = runes[right], runes[left]  }   // 再翻转这个字符串里的每个单词  var left, right int  for right \u0026lt;= size {  for right \u0026lt; size \u0026amp;\u0026amp; runes[right] != \u0026#39; \u0026#39; {  right++  }    for i,j := left, right-1; i \u0026lt; j \u0026amp;\u0026amp; right \u0026lt;= size; i,j = i+1, j-1 {  runes[i], runes[j] = runes[j], runes[i]  }   left,right = right+1, right+1  }   return string(runes) } "},{"id":22,"href":"/docs/algs/codingInterviews/78_%E6%8A%8A%E4%BA%8C%E5%8F%89%E6%A0%91%E6%89%93%E5%8D%B0%E6%88%90%E5%A4%9A%E8%A1%8C/","title":"78. 把二叉树打印成多行","section":"Coding Interviews","content":"Description #   给定一个节点数为 n 二叉树，要求从上到下按层打印二叉树的 val 值，同一层结点从左至右输出，每一层输出一行，将输出的结果存放到一个二维数组中返回。\n Solutions #  Level Order Traversal #  简单题，只需要进行一次层次遍历即可。\nfunc Print( pRoot *TreeNode ) [][]int {  // write code here  var res [][]int  if pRoot == nil {  return res  }   var queue []*TreeNode  queue = append(queue, pRoot)   for len(queue) != 0 {  size := len(queue)  var level []int  for i := 0; i \u0026lt; size; i++ {  node := queue[i]  level = append(level, node.Val)  if node.Left != nil {  queue = append(queue, node.Left)  }  if node.Right != nil {  queue = append(queue, node.Right)  }  }   res = append(res, level)  queue = queue[size:]  }   return res } "},{"id":23,"href":"/docs/algs/codingInterviews/84_%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%92%8C%E4%B8%BA%E6%9F%90%E4%B8%80%E5%80%BC%E7%9A%84%E8%B7%AF%E5%BE%84III/","title":"84. 二叉树中和为某一值的路径 III","section":"Coding Interviews","content":"Description #   给定一个二叉树root和一个整数值 sum ，求该树有多少路径的的节点值之和等于 sum 。 1.该题路径定义不需要从根节点开始，也不需要在叶子节点结束，但是一定是从父亲节点往下到孩子节点 2.总节点数目为n 3.保证最后返回的路径个数在整形范围内(即路径个数小于$2^{31}$-1)\n Solutions #  注意，这里的路径不一定需要从根节点开始，也不一定需要在叶节点结束。\nRecursice #  核心思想就是，每个节点都可能是一条路径的起始节点，所以每个节点都需要作为根节点来遍历一次。\nvar res int func FindPath( root *TreeNode , sum int ) int {  // write code here  if root == nil {  return res  }   findPathHelper(root, sum)  \t// 每个节点都需要作为根节点来进行一次查找  FindPath(root.Left, sum)  FindPath(root.Right, sum)  return res }  func findPathHelper(root *TreeNode, sum int) {  if root == nil {  return  }  // 注意这里的小技巧  if sum == root.Val {  res++  }   findPathHelper(root.Left, sum - root.Val)  findPathHelper(root.Right, sum - root.Val) } "},{"id":24,"href":"/docs/algs/codingInterviews/86_%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E4%B8%A4%E4%B8%AA%E8%8A%82%E7%82%B9%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/","title":"86. 二叉树中两个节点的最近公共祖先","section":"Coding Interviews","content":"Description #   给定一棵二叉树(保证非空)以及这棵树上的两个节点对应的val值 o1 和 o2，请找到 o1 和 o2 的最近公共祖先节点。\n数据范围：树上节点数满足$1 \\le n \\le 10^5$, 节点值val满足区间 [0,n) 要求：时间复杂度 $\\Omicron(n)$\n Solutions #  Recursive #  具体解释看注释即可。\nfunc lowestCommonAncestor( root *TreeNode , o1 int , o2 int ) int {  // write code here  if root == nil {  return -1  }   res := lcaHelper(root, o1, o2)  return res.Val }  func lcaHelper(root *TreeNode, o1, o2 int) *TreeNode {  // 如果已经遍历到空节点或者已经找到其中一个节点，则返回该节点  if root == nil || root.Val == o1 || root.Val == o2 {  return root  }   // 分别查找左子树和右子树  left := lcaHelper(root.Left, o1, o2)  right := lcaHelper(root.Right, o1, o2)   // 如果left 为空，说明这两个节点在 root 的右子树上，则返回右子树查找结果  if left == nil {  return right  }  // 如果 right 为空，说明这两个节点在 root 的左子树上，则返回左子树查找结果  if right == nil {  return left  }   // 如果 left 和 right 都不为空，则说明这两个节点一个在 root 的左子树上，一个在 root 的右子树上，则返回 root 即可  return root } "},{"id":25,"href":"/docs/algs/codingInterviews/9_%E5%8F%8C%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/","title":"9. 双栈实现队列","section":"Coding Interviews","content":"Description #   用两个栈来实现一个队列，使用n个元素来完成 n 次在队列尾部插入整数(push)和n次在队列头部删除整数(pop)的功能。 队列中的元素为int类型。保证操作合法，即保证pop操作时队列内已有元素。\n数据范围： $n \\le 1000$ 要求：存储n个元素的空间复杂度为 $\\Omicron(n)$ ，插入与删除的时间复杂度都是 $\\Omicron(1)$\n Solutions #  使用两个队列，队列1专用于push，队列用专用于pop 和 peek。push 时，入队 stack1； pop 时，如果 stack2 不为空，则弹出 stack2 栈顶即可，若 stack2 为空，则将 stack1 的所有元素压入 stack2， 然后将 stack2 的栈顶元素弹出。\ntype MyQueue struct { \tstack1 []int \tstack2 []int }  func Constructor() MyQueue {  return MyQueue{  stack1: make([]int, 0),  stack2: make([]int, 0),  } }   func (this *MyQueue) Push(x int) { \tthis.stack1 = append(this.stack1, x) }  func (this *MyQueue) Pop() int { \tvar res int \tlen1, len2 := len(this.stack1), len(this.stack2) \tif len2 != 0 { \tele := this.stack2[len2-1] \tres = ele \tthis.stack2 = this.stack2[:len2-1] \t} else { \tfor i := len1 - 1; i \u0026gt;= 0; i-- { \tthis.stack2 = append(this.stack2, this.stack1[i]) \t} \tthis.stack1 = this.stack1[:0] \tlen2 = len(this.stack2) \tres = this.stack2[len2-1] \tthis.stack2 = this.stack2[:len2-1] \t}  \treturn res }  func (this *MyQueue) Peek() int { \tvar res int \tlen1, len2 := len(this.stack1), len(this.stack2) \tif len2 != 0 { \tele := this.stack2[len2-1] \tres = ele \t} else { \tfor i := len1 - 1; i \u0026gt;= 0; i-- { \tthis.stack2 = append(this.stack2, this.stack1[i]) \t}  \tthis.stack1 = this.stack1[:0] \tlen2 = len(this.stack2) \tres = this.stack2[len2-1] \t}  \treturn res }  func (this *MyQueue) Empty() bool { \treturn len(this.stack1) == 0 \u0026amp;\u0026amp; len(this.stack2) == 0 } "}]