[{"id":0,"href":"/docs/algs/","title":"Algorithms","section":"Docs","content":"This is where I document some problems that I solved.\n"},{"id":1,"href":"/docs/algs/codingInterviews/","title":"Coding Interviews","section":"Algorithms","content":"这里是一些《剑指 Offer》的刷题题解。\n"},{"id":2,"href":"/docs/algs/leetcode/","title":"Leetcode","section":"Algorithms","content":"这里是一些 LeetCode 的刷题题解。\n"},{"id":3,"href":"/docs/algs/codingInterviews/28_%E5%AF%B9%E7%A7%B0%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91/","title":"28. 对称的二叉树","section":"Coding Interviews","content":"Description #   给定一棵二叉树，判断其是否是自身的镜像（即：是否对称）\n Solutions #  Recursive #  func isSymmetrical( pRoot *TreeNode ) bool {  // write code here  if pRoot == nil {  return true  }   return isSameTree(pRoot.Left, pRoot.Right) }  func isSameTree(root1, root2 *TreeNode) bool {  if root1 == nil \u0026amp;\u0026amp; root2 == nil {  return true  }   if root1 == nil || root2 == nil {  return false  }   if root1.Val != root2.Val {  return false  }   return isSameTree(root1.Left, root2.Right) \u0026amp;\u0026amp; isSameTree(root1.Right, root2.Left) } "}]